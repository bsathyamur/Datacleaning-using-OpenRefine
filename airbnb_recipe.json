[
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column name using expression value.trim()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "name",
    "expression": "grel:value.match(/(.*?)\\((.*)\\)(.*)/).join(\"\")",
    "onError": "set-to-blank",
    "newColumnName": "name_grel",
    "columnInsertIndex": 2,
    "description": "Create column name_grel at index 2 based on column name using expression grel:value.match(/(.*?)\\((.*)\\)(.*)/).join(\"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name_grel",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column name_grel using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column name using expression value.trim()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "name_grel",
    "expression": "grel:value.replace(\"*\",\"\").replace(\"!\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "name_grel_star",
    "columnInsertIndex": 3,
    "description": "Create column name_grel_star at index 3 based on column name_grel using expression grel:value.replace(\"*\",\"\").replace(\"!\",\"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "host_id",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column host_id using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "host_name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column host_name using expression value.trim()"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "host_name",
    "guessCellType": true,
    "removeOriginalColumn": false,
    "mode": "separator",
    "separator": "And",
    "regex": false,
    "maxColumns": 2,
    "description": "Split column host_name by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "host_name 2",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column host_name 2 using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "host_name 1",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column host_name 1 using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column neighbourhood using expression value.trim()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "neighbourhood",
    "expression": "grel:toTitlecase(value)",
    "onError": "set-to-blank",
    "newColumnName": "neighbourhood_case",
    "columnInsertIndex": 10,
    "description": "Create column neighbourhood_case at index 10 based on column neighbourhood using expression grel:toTitlecase(value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "neighbourhood_case",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "neighbourhood_loop",
    "columnInsertIndex": 11,
    "description": "Create column neighbourhood_loop at index 11 based on column neighbourhood_case using expression grel:value"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_loop",
    "expression": "value",
    "edits": [
      {
        "from": [
          "L??p"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Loop"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_loop"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "neighbourhood_loop",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "neighbourhood_cluster",
    "columnInsertIndex": 12,
    "description": "Create column neighbourhood_cluster at index 12 based on column neighbourhood_loop using expression grel:value"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_cluster",
    "expression": "value",
    "edits": [
      {
        "from": [
          "West Garfieldpark"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "West Garfield park"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_cluster"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_cluster",
    "expression": "value",
    "edits": [
      {
        "from": [
          "West Garfield Bark"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "West Garfield park"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_cluster"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_cluster",
    "expression": "value",
    "edits": [
      {
        "from": [
          "Ohare",
          "O'hare",
          "O?hare",
          "O\"hare"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Ohare"
      },
      {
        "from": [
          "West Garfield park",
          "West Garfield Park"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "West Garfield park"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_cluster"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_cluster",
    "expression": "value",
    "edits": [
      {
        "from": [
          "Westgarfieldpark"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Westgarfield park"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_cluster"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_cluster",
    "expression": "value",
    "edits": [
      {
        "from": [
          "Westgarfield park",
          "Westgarfield Park"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "Westgarfield park"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_cluster"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_cluster",
    "expression": "value",
    "edits": [
      {
        "from": [
          "Ohare"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "O'Hare"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_cluster"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_cluster",
    "expression": "value",
    "edits": [
      {
        "from": [
          "Westgarfield park"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "West Garfield Park"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_cluster"
  },
  {
    "op": "core/mass-edit",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "neighbourhood_cluster",
    "expression": "value",
    "edits": [
      {
        "from": [
          "West Garfield Park",
          "West Garfield park"
        ],
        "fromBlank": false,
        "fromError": false,
        "to": "West Garfield Park"
      }
    ],
    "description": "Mass edit cells in column neighbourhood_cluster"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "latitude",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column latitude using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "longitude",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column longitude using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "room_type",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column room_type using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "price",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column price using expression value.toNumber()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "price",
    "expression": "grel:if(value>5000,1,\"\")",
    "onError": "set-to-blank",
    "newColumnName": "price_crazy",
    "columnInsertIndex": 17,
    "description": "Create column price_crazy at index 17 based on column price using expression grel:if(value>5000,1,\"\")"
  },
  {
    "op": "core/column-removal",
    "columnName": "price_crazy",
    "description": "Remove column price_crazy"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "price",
    "expression": "grel:if(value>=5000,1,\"\")",
    "onError": "set-to-blank",
    "newColumnName": "prize_crazy",
    "columnInsertIndex": 17,
    "description": "Create column prize_crazy at index 17 based on column price using expression grel:if(value>=5000,1,\"\")"
  },
  {
    "op": "core/column-removal",
    "columnName": "prize_crazy",
    "description": "Remove column prize_crazy"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "price",
    "expression": "grel:if(value >=5000,1,\"\")",
    "onError": "set-to-blank",
    "newColumnName": "price_crazy",
    "columnInsertIndex": 17,
    "description": "Create column price_crazy at index 17 based on column price using expression grel:if(value >=5000,1,\"\")"
  },
  {
    "op": "core/column-removal",
    "columnName": "price_crazy",
    "description": "Remove column price_crazy"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "price",
    "expression": "grel:if(value>4800,1,\"\")",
    "onError": "set-to-blank",
    "newColumnName": "price_crazy",
    "columnInsertIndex": 17,
    "description": "Create column price_crazy at index 17 based on column price using expression grel:if(value>4800,1,\"\")"
  },
  {
    "op": "core/column-removal",
    "columnName": "price_crazy",
    "description": "Remove column price_crazy"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "price",
    "expression": "grel:if(value>5000,1,\"\")",
    "onError": "set-to-blank",
    "newColumnName": "price_crazy",
    "columnInsertIndex": 17,
    "description": "Create column price_crazy at index 17 based on column price using expression grel:if(value>5000,1,\"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "minimum_nights",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column minimum_nights using expression value.toNumber()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "minimum_nights",
    "expression": "grel:if(value>300,1,\"\")",
    "onError": "set-to-blank",
    "newColumnName": "minimum_nights_long",
    "columnInsertIndex": 19,
    "description": "Create column minimum_nights_long at index 19 based on column minimum_nights using expression grel:if(value>300,1,\"\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "number_of_reviews",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column number_of_reviews using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "last_review",
    "expression": "value.toDate()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column last_review using expression value.toDate()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "last_review",
    "expression": "grel:toString(toDate(value),\"yyyy-MM-dd\")",
    "onError": "set-to-blank",
    "newColumnName": "last_review_timeless",
    "columnInsertIndex": 22,
    "description": "Create column last_review_timeless at index 22 based on column last_review using expression grel:toString(toDate(value),\"yyyy-MM-dd\")"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "reviews_per_month",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column reviews_per_month using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "calculated_host_listings_count",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column calculated_host_listings_count using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "availability_365",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column availability_365 using expression value.toNumber()"
  }
]